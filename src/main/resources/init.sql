CREATE TABLE if not exists GRADEBOOK_USER(
   USER_ID  serial primary key,
   USERNAME VARCHAR(50) NOT NULL UNIQUE,
   PASSWORD VARCHAR(200) NOT NULL);

CREATE TABLE if not exists ROLE(
   ROLE_ID  INTEGER primary key,
   NAME     VARCHAR(20) not null);
INSERT INTO ROLE VALUES (1, 'ADMIN') ON CONFLICT DO NOTHING;
INSERT INTO ROLE VALUES (2, 'TEACHER') ON CONFLICT DO NOTHING;
INSERT INTO ROLE VALUES (3, 'PUPIL') ON CONFLICT DO NOTHING;

CREATE TABLE if not exists USER_ROLE(
   USER_ID INTEGER,
   ROLE_ID INTEGER,
   CONSTRAINT USER_ROLE_UNIQUE UNIQUE (USER_ID, ROLE_ID),
   FOREIGN KEY (USER_ID)
   REFERENCES GRADEBOOK_USER (USER_ID) ON DELETE CASCADE,
   FOREIGN KEY (ROLE_ID)
   REFERENCES ROLE (ROLE_ID) ON DELETE CASCADE);

CREATE TABLE if not exists TEACHER(
  TEACHER_ID INTEGER PRIMARY KEY,
  NAME       VARCHAR(100) NOT NULL,
  POSITION   VARCHAR(100) NOT NULL,
  FOREIGN KEY (TEACHER_ID)
  REFERENCES GRADEBOOK_USER (USER_ID) ON DELETE CASCADE);

CREATE TABLE if not exists SUBJECT(
   SUBJECT_ID serial PRIMARY KEY,
   NAME       VARCHAR(100) NOT NULL);
 
CREATE TABLE if not exists CLASS(
   CLASS_ID serial PRIMARY KEY,
   GRADE    INTEGER  NOT NULL CHECK(grade > 0 AND grade <= 11),
   NAME     VARCHAR(30) NOT NULL);
 
CREATE TABLE if not exists PUPIL(
   PUPIL_ID INTEGER PRIMARY KEY,
   CLASS_ID INTEGER,
   NAME     VARCHAR(100) NOT NULL,
   FOREIGN KEY (CLASS_ID) 
   REFERENCES CLASS (CLASS_ID),
   FOREIGN KEY (PUPIL_ID)
   REFERENCES GRADEBOOK_USER (USER_ID) ON DELETE CASCADE);


CREATE TABLE if not exists SCHOOL_YEAR(
   SCHOOL_YEAR_ID serial PRIMARY KEY,
   NAME        VARCHAR(100) NOT NULL,
   START_DATE  DATE NOT NULL,
   END_DATE    DATE NOT NULL);

CREATE TABLE if not exists SEMESTER(
   SEMESTER_ID    serial PRIMARY KEY,
   SCHOOL_YEAR_ID INTEGER NOT NULL,
   NAME           VARCHAR(100) NOT NULL,
   START_DATE     DATE NOT NULL,
   END_DATE       DATE NOT NULL,
   FOREIGN KEY (SCHOOL_YEAR_ID)
   REFERENCES SCHOOL_YEAR (SCHOOL_YEAR_ID) ON DELETE CASCADE);

CREATE TABLE if not exists SUBJECT_DETAILS(
   SUBJECT_DETAILS_ID serial PRIMARY KEY,
   CLASS_ID           INTEGER NOT NULL,
   TEACHER_ID         INTEGER,
   SUBJECT_ID         INTEGER NOT NULL,
   SEMESTER_ID        INTEGER NOT NULL,
   CONSTRAINT SUBJECT_DETAILS_UNIQUE UNIQUE (CLASS_ID, SUBJECT_ID, SEMESTER_ID),
   FOREIGN KEY (CLASS_ID) 
   REFERENCES CLASS (CLASS_ID) ON DELETE CASCADE,
   FOREIGN KEY (TEACHER_ID) 
   REFERENCES TEACHER (TEACHER_ID) ON DELETE CASCADE,
   FOREIGN KEY (SUBJECT_ID) 
   REFERENCES SUBJECT (SUBJECT_ID) ON DELETE CASCADE,
   FOREIGN KEY (SEMESTER_ID)
   REFERENCES SEMESTER (SEMESTER_ID) ON DELETE CASCADE);
 
CREATE TABLE if not exists THEME(
   THEME_ID           serial PRIMARY KEY,
   SUBJECT_DETAILS_ID INTEGER NOT NULL,
   NAME               VARCHAR(1000) NOT NULL,
   FOREIGN KEY (SUBJECT_DETAILS_ID)
   REFERENCES SUBJECT_DETAILS (SUBJECT_DETAILS_ID) ON DELETE CASCADE);

CREATE TABLE if not exists LESSON(
   LESSON_ID   serial PRIMARY KEY,
   THEME_ID    INTEGER NOT NULL,
   LESSON_DATE DATE NOT NULL,
   TOPIC       VARCHAR(1000) NOT NULL,
   FOREIGN KEY (THEME_ID)
   REFERENCES THEME (THEME_ID) ON DELETE CASCADE);
 
CREATE TABLE if not exists MARK(
   MARK_ID   serial PRIMARY KEY,
   PUPIL_ID  INTEGER NOT NULL,
   LESSON_ID INTEGER NOT NULL,
   MARK      INTEGER NOT NULL CHECK(mark > 0 AND mark <= 12),
   CONSTRAINT MARK_UNIQUE UNIQUE (PUPIL_ID, LESSON_ID),
   FOREIGN KEY (PUPIL_ID) 
   REFERENCES PUPIL (PUPIL_ID) ON DELETE CASCADE,
   FOREIGN KEY (LESSON_ID) 
   REFERENCES LESSON (LESSON_ID) ON DELETE CASCADE);

create table if not exists absent(
   ABSENT_ID   serial PRIMARY KEY,
   PUPIL_ID  INTEGER NOT NULL,
   LESSON_ID INTEGER NOT NULL,
   CONSTRAINT ABSENT_UNIQUE UNIQUE (PUPIL_ID, LESSON_ID),
   FOREIGN KEY (PUPIL_ID) 
   REFERENCES PUPIL (PUPIL_ID) ON DELETE CASCADE,
   FOREIGN KEY (LESSON_ID) 
   REFERENCES LESSON (LESSON_ID) ON DELETE CASCADE
);
